<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Morni best</title>
    <style>
        /* CSS: ページ全体のスタイルを設定 */
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
            background-color: #f0f0f0;
            overflow: hidden;
        }

        body {
            display: flex;
            justify-content: center;
            align-items: center;
            text-align: center;
            flex-direction: column;
        }

        .container {
            width: 90%;
            max-width: 400px;
            box-sizing: border-box;
            padding: 20px;
        }

        h1 {
            font-size: 2.5rem;
            font-weight: 300;
            color: #333;
            margin-bottom: 0.5em;
        }

        p.subtitle { /* subtitleクラスを追加 */
            font-size: 1.2rem;
            color: #555;
            margin-bottom: 2em;
        }

        .button-wrapper {
            display: flex;
            justify-content: center;
            gap: 20px;
        }

        .mode-button {
            width: 120px;
            height: 120px;
            border: 2px solid #333;
            background-color: #fff;
            font-size: 1.1rem;
            font-weight: bold;
            color: #333;
            cursor: pointer;
            transition: background-color 0.2s, transform 0.2s;
            display: flex;
            justify-content: center;
            align-items: center;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        .mode-button:hover, .mode-button:active {
            background-color: #e9e9e9;
            transform: scale(1.05);
        }
        
        /* --- ここから追加 --- */
        .count-display {
            margin-top: 2.5em;
            padding: 1em;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }

        .count-display p {
            margin: 0.5em 0;
            font-size: 1.1rem;
            color: #333;
            font-weight: 500;
        }

        .count-display span {
            font-weight: bold;
            font-size: 1.5em;
            color: #007bff; /* カウントの数字の色 */
            margin: 0 0.2em;
        }
        /* --- ここまで追加 --- */

        /* メッセージ表示エリアのスタイル (変更なし) */
        .message-section {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: rgba(255, 255, 255, 0.95);
            font-size: 3rem;
            font-weight: bold;
            color: #333;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.5s ease-out;
            z-index: 100;
        }

        .message-section.active {
            opacity: 1;
            visibility: visible;
        }

        .message-section.dara-dara-active {
            animation: blur-in 1.5s forwards;
        }

        @keyframes blur-in {
            0% { opacity: 0; filter: blur(10px); transform: scale(0.9); }
            100% { opacity: 1; filter: blur(0); transform: scale(1); }
        }

        .message-section.saku-saku-active {
            animation: slide-in-right 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
        }

        @keyframes slide-in-right {
            0% { transform: translateX(100%); opacity: 0; }
            100% { transform: translateX(0); opacity: 1; }
        }
    </style>
</head>
<body>

    <div class="container">
        <h1>Morni best</h1>
        <p class="subtitle">どっちのモードですごす？</p>
        <div class="button-wrapper">
            <button id="dara-dara-btn" class="mode-button">ダラダラ<br>モード</button>
            <button id="saku-saku-btn" class="mode-button">サクサク<br>モード</button>
        </div>
        
        <div class="count-display">
            <p id="saku-saku-count-text">サクサク日数は<span id="saku-saku-count">0</span>日です</p>
            <p id="dara-dara-count-text">ダラダラ日数は<span id="dara-dara-count">0</span>日です</p>
        </div>
        </div>

    <div id="messageSection" class="message-section">
        <span id="messageText"></span>
    </div>

    <script>
        // --- ここから変更・追加 ---

        // DOM要素の取得
        const daraDaraButton = document.getElementById('dara-dara-btn');
        const sakuSakuButton = document.getElementById('saku-saku-btn');
        const messageSection = document.getElementById('messageSection');
        const messageText = document.getElementById('messageText');
        const sakuSakuCountSpan = document.getElementById('saku-saku-count');
        const daraDaraCountSpan = document.getElementById('dara-dara-count');
        
        // ページの読み込み完了時にカウントを読み込んで表示する
        document.addEventListener('DOMContentLoaded', () => {
            loadCounts();
        });

        // カウントをlocalStorageから読み込む関数
        function loadCounts() {
            // localStorageから値を取得。なければ0をデフォルト値とする
            const sakuSakuCount = parseInt(localStorage.getItem('sakuSakuCount')) || 0;
            const daraDaraCount = parseInt(localStorage.getItem('daraDaraCount')) || 0;
            
            // 画面に表示
            sakuSakuCountSpan.textContent = sakuSakuCount;
            daraDaraCountSpan.textContent = daraDaraCount;
        }

        // カウントを更新する関数
        function updateCount(mode) {
            const key = mode === 'saku-saku' ? 'sakuSakuCount' : 'daraDaraCount';
            
            // 現在のカウントを取得して1増やす
            let currentCount = parseInt(localStorage.getItem(key)) || 0;
            currentCount++;
            
            // 新しいカウントをlocalStorageに保存
            localStorage.setItem(key, currentCount);
            
            // 画面表示を更新
            loadCounts();
        }

        daraDaraButton.addEventListener('click', () => {
            updateCount('dara-dara'); // カウントを更新
            showMessage('ごゆっくりどうぞ〜', 'dara-dara');
        });

        sakuSakuButton.addEventListener('click', () => {
            updateCount('saku-saku'); // カウントを更新
            showMessage('頑張ろう！', 'saku-saku');
        });

        // --- ここまで変更・追加 ---


        // メッセージ表示関数 (変更なし)
        function showMessage(text, mode) {
            messageSection.classList.remove('dara-dara-active', 'saku-saku-active');
            messageText.textContent = text;
            messageSection.classList.add('active');
            if (mode === 'dara-dara') {
                messageSection.classList.add('dara-dara-active');
            } else if (mode === 'saku-saku') {
                messageSection.classList.add('saku-saku-active');
            }
            setTimeout(() => {
                messageSection.classList.remove('active', 'dara-dara-active', 'saku-saku-active');
            }, 3000);
        }
        
        messageSection.addEventListener('click', () => {
            messageSection.classList.remove('active', 'dara-dara-active', 'saku-saku-active');
        });
    </script>

</body>
</html>